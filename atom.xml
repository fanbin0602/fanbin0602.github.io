<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.fanbin.dev</id>
    <title>MQ TALK</title>
    <updated>2019-07-19T05:57:57.454Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.fanbin.dev"/>
    <link rel="self" href="https://blog.fanbin.dev/atom.xml"/>
    <subtitle>&lt;del&gt;MQ is short for 懵圈儿&lt;/del&gt;</subtitle>
    <logo>https://blog.fanbin.dev/images/avatar.png</logo>
    <icon>https://blog.fanbin.dev/favicon.ico</icon>
    <rights>All rights reserved 2019, MQ TALK</rights>
    <entry>
        <title type="html"><![CDATA[从数据结构和算法说起]]></title>
        <id>https://blog.fanbin.dev/post/KjvN5t32S</id>
        <link href="https://blog.fanbin.dev/post/KjvN5t32S">
        </link>
        <updated>2019-07-18T16:01:50.000Z</updated>
        <summary type="html"><![CDATA[<p>之前的一个月，是我裸辞以后找工作的时间。出于自己的上进心，以及面试官对我的「虐待」，我开始认真复习了一些数据结构和算法的知识。有了新的收获，做一些记录。</p>
]]></summary>
        <content type="html"><![CDATA[<p>之前的一个月，是我裸辞以后找工作的时间。出于自己的上进心，以及面试官对我的「虐待」，我开始认真复习了一些数据结构和算法的知识。有了新的收获，做一些记录。</p>
<!-- more --> 
<p>在大学的时候，数据结构和算法、计算机网络、操作系统、编译原理这些课程，让很多人头疼，而且，很多知识由于在学校里缺乏实践，学过考过之后很快就忘掉了。刚开始工作时，大部分人的工作内容也很少涉及到这些知识，于是它们就被大部分人忘记了。但是，这些并不是没用的知识，而是一些「不懂也感觉不到有什么坏处，但搞懂后就大不一样」的知识。</p>
<h2 id="它们到底是什么">它们到底是什么</h2>
<p>数据结构是计算机存储和组织数据的方式，我们常见的数据结构，数组、链表、散列表等，都是对一组数据的不同组织方式。算法是指计算机程序操作数据的步骤，比如常见的快速排序、二分查找等。</p>
<h2 id="为什么要学习这些知识">为什么要学习这些知识</h2>
<p><strong>数据结构</strong>是计算机组织和存储一组数据的方式。最常见的数据结构有数组、链表、散列表、二叉树等等。</p>
<p>随着计算机程序处理数据量的增加，不同的数据结构对一组数据的组织方式，会对程序的运行性能产生巨大影响。</p>
<p><strong>算法</strong>是计算机程序操作数据的具体步骤。</p>
<p>举个例子，要把大象装冰箱，总共分三步：</p>
<ol>
<li>把冰箱门打开</li>
<li>把大象放进去</li>
<li>把冰箱门关上</li>
</ol>
<p>以上就是把大象装冰箱的一种「算法」，之所以说是「一种」算法，是因为，计算机程序做一件事，可以使用任何能够达到计算目标的算法。但是，不同的算法在做同一件事情的时候，代码和运行速度和资源消耗，有不小的差别，这也是为什么我们要学习算法的知识。</p>
<p>数据结构和算法两者经常被一起提及，是因为在实际应用中，它们密不可分。</p>
<p><strong>数据结构服务于算法，算法运行在特定的数据结构之上。</strong></p>
<p>不要小看它们对代码性能和资源消耗的影响，很多流行的开源项目，它们的优秀之处，除了巧妙的架构设计，很大程度上都得益于高性能和低消耗，很多编程高手，它们的优秀之处很大程度上也在于能写出这样的代码。</p>
<h2 id="为什么要学好数据结构和算法">为什么要学好数据结构和算法</h2>
<p>对于需要去找工作的程序员来说，学习数据结构和算法知识，最直接的好处就是通过面试。大部分的 技术面试中都会问到一些相关的知识，比如快速排序、二叉树操作等。</p>
<p>在工作中，不懂数据结构和算法的程序员，几乎只能写一些基本的业务代码，做一名倔强的 CRUD boy，很难跨过初级程序员的第一个职业台阶。掌握这些底层的知识，能让一个初级程序员从业务开发向系统架构逐步转变。</p>
<p>除了跨越职业发展门槛这件事，认真学习这些基础知识，更能带来思维的转化。有些人是科班出身，但是大学时候并没有认真学习基础课程，有些人不是科班出身，学习了一些开发框架的使用，就能开始程序员的职业生涯，对于这些人，基础知识迟早是要补的。</p>
<p>如果能熟练的掌握和运用数据结构和算法的相关知识，就能在平时写代码的过程中，去关注代码的质量、运行性能、扩展性等问题，而不是关注能不能完成功能的问题。这一定是一个重要的转变。</p>
<p>另外，如果想写一个开源项目，学习和运用合适的数据结构和算法，也能让代码更拿得出手。</p>
<h2 id="还有什么好处">还有什么好处</h2>
<p>除了关注点的转变（从表层到底层）和思维方式的转变（从功能到性能），基础知识的学习也能带来一些长期的好处。</p>
<p>近些年，前端开发领域发展迅速，各种新的开发框架 层出不穷，很多人盲目地追求新技术，不断学习新技术，新技术迅速淘汰，又转而去学习更新的技术。但其实，如果深入研究这些新技术，就会发现，它们的不同之处其实只存在于表层，例如各种各样的大前端跨平台开发框架，它们的底层技术其实都是一样的，只是提供了不同的封装方式 。因此，多多关注基础知识和底层的技术 ，能帮助我们走出「不断学习新技术」的死循环。</p>
<p>随着思维和关注点的转变，我们的长期能力也能得到增强，职业发展的天花板也能得到提高。</p>
<p>之后，我打算总结一些学习数据结构和算法当中的知识要点总结在博客里。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一个小程序和第一笔赞赏]]></title>
        <id>https://blog.fanbin.dev/post/OhsLHjLan</id>
        <link href="https://blog.fanbin.dev/post/OhsLHjLan">
        </link>
        <updated>2018-03-28T01:55:35.000Z</updated>
        <summary type="html"><![CDATA[<p>上一个农历年的年底，对小程序开发产生了兴趣，且正好看到「知晓云」这个服务可以在有限条件内免费使用，于是就开始利用业余时间开发起了一个小程序「藏书助手」。</p>
]]></summary>
        <content type="html"><![CDATA[<p>上一个农历年的年底，对小程序开发产生了兴趣，且正好看到「知晓云」这个服务可以在有限条件内免费使用，于是就开始利用业余时间开发起了一个小程序「藏书助手」。</p>
<!-- more -->
<p>可以在微信小程序搜索「藏书助手」找到它。</p>
<h2 id="藏书助手">藏书助手</h2>
<p>「藏书助手」是一个纯粹的个人项目。之所以这样说，原因有两个，其一，开发这个项目是为了我满足自己的使用需求，其二，这是为了学习小程序开发用来练手的项目。当开发出最初版本的时候，自己试用了一下，感觉还算顺手，而且目前好像没有类似的小程序，就想着看能不能发布上线。</p>
<p>期间还经历了一些插曲。</p>
<p>这个小程序的功能是通过扫描书籍的条形码，获取 ISBN 后查询书籍相关的信息，进行收藏整理。书籍信息需要从一个拥有书籍信息数据的第三方获取。我最先想到的是从聚合数据或者类似的数据接口提供商那里获取数据，但是存在两个问题。第一个问题，小程序的网络请求必须是 HTTPS 请求，提供商如果不支持，那就肯定不能用。第二个问题，这些服务商的接口在请求的时候，需要将一个我申请的密钥作为参数放在请求里，如果在小程序里使用，就只能把这个密钥以明文的方式写在小程序里，这样明显是不安全的。于是就放弃了这个方案。</p>
<p>之后我发现豆瓣的开放 API 支持 HTTPS，而且是开放接口，可以直接通过公开的地址请求，并且不用附带类似密钥的参数，能请求到的数据也相当完整，于是，就使用了豆瓣的接口。</p>
<p>问题又来了。虽然，每个小程序都是一个独立的，但是，所有的小程序发出去的 HTTPS 请求的 Referer 都是一样的。这样就导致一个问题，如果有一百个小程序在使用豆瓣的数据接口，豆瓣会把这些小程序发出的请求都识别为同一个来源的请求，当请求量很大时（这种情况下，请求量必然会很大），豆瓣就会启动防护，导致小程序没办法使用豆瓣的接口。就在我打算将「藏书助手」提交审核的前一两天，这种情况发生了，而且，看小程序的开发者社区，很多人都遇到了这个问题。</p>
<p>得想别的办法了。</p>
<p>除了豆瓣，没有这样的数据接口了，而且，读取数据的代码都是按照豆瓣给的数据的结构写的，我得想个办法，从别的地方——而不是小程序内——请求豆瓣的数据。最次的办法肯定是搭服务器，转发请求，但是还有没有别的办法呢？</p>
<p>我去看了看阿里云的产品列表，有一个“API 网关”服务，然后发现了“函数计算”服务。于是，我想把这两个做一个结合，通过 API 网关，暴露接口服务，然后调用“函数计算”中自定义的函数，从豆瓣读取数据，再返回给调用 API 网关服务的小程序。不过，折腾了两天，没把这个事情搞定，于是就放弃了。</p>
<p>最后只能用最笨的办法，搭服务器，转发请求。根据小程序后台的要求，所有在小程序中请求数据的网址，都需要在小程序后台配置，且必须是已经备案的站点地址。至此，本来是抱着玩一玩的心态，结果最后来了一个全家桶：购买服务器和域名、走备案程序、配置服务器转发请求。其余的都好说，备案程序走了大半个月。</p>
<p>在农历年之前提交发布上线的计划，也拖到了年后。中间还因为审核不通过被拒了一次，不过，很快就修改了，顺利上线了。</p>
<h2 id="知晓云">知晓云</h2>
<p>决定我开发「藏书助手」小程序的，还有另外一个因素。当时只是为了练手，并没有打算有什么投入，当然包括搭建服务器。因此，「知晓云」的免费个人开发者套餐为我开发「藏书助手」降低了门槛。</p>
<p>知晓云是一个面向小程序的 BaaS 服务，提供了在线数据库、富文本内容、文件的管理，以及用于小程序的 JSSDK，可以免去服务端开发，专注于小程序前端。</p>
<p>只需要在知晓云的后台，新建小程序，并配置好相关的信息，再将它提供的安全网址配置到小程序的后台，就可以开始了。我主要用到了数据库服务，自己设计好数据库接口，就可以在小程序开发工具里，调用知晓云 JSSDK 提供的工具来对数据进行操作了，非常方便。</p>
<p>顺便做个广告，通过我的邀请注册知晓云，可以获得一些优惠：</p>
<p><a href="https://cloud.minapp.com/?invitation=qcrmoj">点这里</a></p>
<h2 id="小程序">小程序</h2>
<p>该说说小程序本身了。</p>
<p>当张小龙第一次提及「应用号」（小程序最开始打算叫这个名字）的时候，给我的感觉就像微信刚刚推出公众号时一样。这两者都是这样一种优秀的产品：它被推出之前，没人做类似的产品，但是它一面世，人们都觉得这是了不起的产品。</p>
<p>小程序兼具原生应用的流畅度和 Web 应用的轻量级，为移动端应用程序提供了新的可能性。对用户来说，小程序无需安装和卸载，无处不在、用完即走；开发者来说，开发工具简单易用，且很容易上手；对各个服务商来说，微信大量的用户、社交关系、完善的支付体系都为各种各样的服务提供了极大的便利。</p>
<p>我从自己开发「藏书助手」的过程中感觉到，这是一个及其低门槛的事情，未来必然会有大量具有想象力的小程序出现。</p>
<h2 id="第一笔赞赏">第一笔赞赏</h2>
<p>今天早上上班刚到公司，看到微信提示我收到了一笔赞赏，赞赏的留言内容是：非常喜欢你的藏书助手小程序。</p>
<p>当时心想，我的小程序里没有放赞赏码，怎么就收到赞赏了呢？后来发现，是一个微信网友在我微信公众号里看到了我关联的小程序，然后，通过我最新发表的文章的赞赏码，给我赞赏了两块钱。</p>
<p>虽然只是两块钱，但是对我是极大的激励，这是我第一次收到陌生人的赞赏。赞赏代表认可，陌生人的认可才是真的认可。</p>
<p>被认可，很开心。</p>
<h2 id="再说藏书助手">再说「藏书助手」</h2>
<p>一开始，开发这个小程序的时候，只想着开发一个很简单的功能，刚刚够用即可，以至于主界面上只有一个按钮。得益于微信的渠道，藏书助手每天都会有几个新用户来访问，大部分进来看看就走了，目前的数据看，有一百来个用户，大部分只打开过一次。</p>
<p>不过，这也给我带来了收获。在小程序后台的数据中，我能看到，点开我开发的小程序的人来自全国各地，用着各式各样的手机，他们通过藏书助手，扫描了各式各样的书，让我知道我的圈子之外的人们，在学习些什么东西。很奇妙。</p>
<p>虽然只是一个业余时间的练手项目，我想，还是应该不断把它完善一下。毕竟，这个世界上有很多爱读书的人，他们坐在自己的书桌前，享受自己的宁静，也不打扰旁人，我希望我和这些人能通过某种东西建立连接。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[理性派的礼物]]></title>
        <id>https://blog.fanbin.dev/post/xTJsTjgUD</id>
        <link href="https://blog.fanbin.dev/post/xTJsTjgUD">
        </link>
        <updated>2018-03-16T02:08:21.000Z</updated>
        <summary type="html"><![CDATA[<p>前段时间读了桥水基金的创始人瑞·达利欧的《原则》这本书，不得不说，这正是我一直想读的一本真实世界的游戏攻略，作者在书里分享了自己 40 多年的生活和工作原则，这些可执行的原则浓缩了他的智慧和哲学，作者认为，正是这些原则使他获得了今天的成就。</p>
]]></summary>
        <content type="html"><![CDATA[<p>前段时间读了桥水基金的创始人瑞·达利欧的《原则》这本书，不得不说，这正是我一直想读的一本真实世界的游戏攻略，作者在书里分享了自己 40 多年的生活和工作原则，这些可执行的原则浓缩了他的智慧和哲学，作者认为，正是这些原则使他获得了今天的成就。</p>
<!-- more -->
<blockquote>
<p>我一生中学到的最重要的东西是一种以原则为基础的生活方式，是它帮助我发现真相是什么，并据此如何行动。——瑞·达利欧</p>
</blockquote>
<p>瑞·达利欧被称为「投资界的乔布斯」。他打算写两本书来分享自己的原则，第一本分享自己在生活和工作中的原则，第二本则关注经济和投资领域。所以，目前出版的这本，准确的书名应该是《原则：生活和工作》，英文原版书名叫《Principles: Life and Work》。</p>
<h2 id="瑞达利欧">瑞·达利欧</h2>
<p>瑞·达利欧在我眼里绝对是个理性派实干家，他依靠原则和算法管理投资，也一样用它们管理公司和员工。他极度相信原则，并严格执行，他不但自己执行，而且要求公司里所有的员工都严格贯彻，公司在他眼里就像一个依照他的严密逻辑稳定运行的机器。</p>
<p>但他并不是一个独裁者或者「邪教头子」。他提倡人们保持理性和开放的心态解决生活中的问题，并且在工作当中保持极度的真实和透明。理性、开放、透明和「优秀想法至上」这些原则，在读完他的书之后，让人印象深刻。</p>
<h2 id="达成目标的方法">达成目标的方法</h2>
<p>作者在书中介绍的最重要的原则之一，就是「达成目标的五个步骤」。这五个步骤分别是：</p>
<ul>
<li>有明确的目标</li>
<li>找到阻碍你实现这些目标的问题，并且不容忍问题</li>
<li>准确诊断问题，找到问题的根源</li>
<li>规划可以解决问题的方案</li>
<li>做一切必要的事来践行这些方案，实现成果</li>
</ul>
<p>这几个简单步骤中，其实蕴含了很多智慧，如果在真实世界中，这些步骤难以顺利地执行，那一定是缺少这些智慧。比如，设定目标的时候不应该想着自己如何实现，诊断问题的时候不要想着该如何解决，这些都会导致最终问题得不到真正的解决。</p>
<h3 id="找到自己的目标">找到自己的目标</h3>
<p>我们在给自己设定目标的时候，常常会将它与欲望混淆。比如，我想减肥，同时我也特别想吃油腻的食物。这里的「减肥」就是目标，而「想吃油腻的食物」就是欲望。合理的目标是真正想要的东西，而欲望常常会阻止目标的实现。真实世界中识别目标和欲望往往比这个例子要复杂，目标常常隐藏在茫茫的欲望当中，需要用慧眼把它找出来。</p>
<p>关于设定目标，还有一个重要的原则是：不要把那些明知自己能实现的东西最为目标。因为那样的话，对自己要求就太低了。</p>
<h3 id="认识问题">认识问题</h3>
<p>当确立了自己的目标后，就有了前进的方向，这时候就得去发现那些阻碍我们达成目标的因素。这些因素往往来源于我们自身的弱点。那怎么发现它们呢？</p>
<p>达利欧说，人最大的弱点，就是主观行事。在我看来，「主观行事」这四个字说的就是「不理性」。达里奥把「主观行事」归因于两个障碍，一个是「自我」，一个是「盲点」，对于这两个障碍，我同样有自己的理解，「自我」就是不能理性客观地看待自己，「盲点」就是不能理性客观地看待外在环境。</p>
<p>一个人的「自我」这个特性，往往表现为无法接受自己的感情受到伤害，这种人在面对自己弱点的时候多少有点自卑。比如，有些人往往不能接受别人当面调侃自己的弱点，甚至自己私下里都会刻意避免去想。其实，认识到自己的弱点，并不意味这被打败，相反，这是克服它的第一步。让理性而不是自我占上风，这是客观看待自己的前提条件。</p>
<p>其次，只认识自我其实还不够，我们还需要消除自己的盲点，理性地认识认识客观世界。人和人之间看问题的角度大不相同，大家的思维方式也差异巨大，想要消除自己的盲点，就需要我们保持开放的心态，而不是固执己见。站在更高的层面上看事物，总能看得更加清除全面。</p>
<p>消除了这两个障碍，才能真正认识到自己的问题，不至于得出错误的判断的同时还听不进去别人的意见。</p>
<h3 id="诊断问题">诊断问题</h3>
<p>诊断就是要找到问题背后的根本原因，达里奥说，为此你必须区分症状和疾病本身。症状就好比一个人头疼，而疾病本身指的是这个人为什么头疼，可能是因为感冒了，也可能是因为别的什么原因。为了找到疾病本身，我们需要一层一层地去问题背后寻找。</p>
<p>把症状当成疾病本身是一个常常发生在很多人身上的错误，为此，我们同样需要保持开放和理性的心态，观察问题，发现背后的根本原因。</p>
<h3 id="规划和执行方案">规划和执行方案</h3>
<p>达里欧认为，草拟一个行动方案是必不可少的。这也是大多数理性派们做事的风格：制定完美的计划，然后严格执行。</p>
<p>很多书籍都会教人们如何规划自己的行动，然后执行。但也有很多人和我一样，行动力完全被思想上的完美主义所裹挟。什么是思想上的完美主义呢？就是凡事总想要做出完美的规划，然后再去按照规划严格执行。但其实完美的行动规划是不存在的，这样只会让我们成为行动上的矮子。</p>
<p>因此，我认为，理性派们更应该在方案规划上保持克制，把心思放在如何提高自己的行动力上。《自控力》这本书中就说过，计划本身如果花费太多时间，就不会行动了。因为很多人做完计划，感觉已经把这件事干完了，热情已经消耗完了，等真正执行的时候反而没有什么热情了。</p>
<h2 id="决策的最佳模式">决策的最佳模式</h2>
<p>这本书中另一个极其重要的原则叫作「创意择优」。什么是创意择优呢？这是一个在有效权衡不同人所提出观点的可信度的同时，还能让每个人都觉得过程明显公平的决策体系。</p>
<p>达里欧说：一个组织想要成功，不是看创始人有多牛，也不是看手上有多少资源，而是看这个企业能不能奉行创意择优的原则。</p>
<p>可见这一决策体系对达利欧思想原则的重要性。当然，要让这样的体系发挥它的作用，需要一些前提。</p>
<h3 id="极度求真和极度透明">极度求真和极度透明</h3>
<p>创意择优的第一步，是每个人都开诚布公地亮出观点。</p>
<p>作者在书中介绍了一个例子。又一次，达利欧本人要在一个例会讲话，会议本来打算是要讨论公司文化，但是达利欧的讲话大部分时间都花在了讲交易策略上，最后有关公司文化的只讲了十分钟。会议结束后，他收到了一个参会员工的邮件，邮件内容是：</p>
<blockquote>
<p>Ray，你今天在会上的表现，我给你的打分是 D-。之前我们已经说好了会议要讨论文化的事情，可是你显然没有做好这方面的准备，所以你就讲交易策略，内容毫无新意，还讲了 62 分钟 —— 我都给你掐表了。你因为自己没准备好而浪费了大家的时间。</p>
</blockquote>
<p>在达利欧的公司内部，已经直言不讳到了这个程度。不过，这样也有副作用：新来的人都受不了。这些人要么需要一个很长的磨合期，要么过不了多久就走了。</p>
<p>达利欧在书中引用了哈佛大学发展心理学家鲍勃·基根的一句话：</p>
<blockquote>
<p>人在公司其实在做两种工作：一种是他实际正在干的事儿，一种是她做给别人看、希望别人以为他正在做的事儿。</p>
</blockquote>
<p>达利欧希望他所有的员工都只需要做第一种事儿，你不但不用在别人面前假装，该干什么就干什么，而且，也不需要猜别人在干什么。</p>
<h3 id="可信度加权">可信度加权</h3>
<p>大家都开诚布公地亮出了自己的观点，然后，听谁的呢？让每个人都解释自己的观点，然后在讨论，这太浪费时间了。在桥水，每个人，在每个领域，都有一个「可信度」。谁的可信度高，就更倾向于听谁的。</p>
<p>那可信度怎么来呢？第一，如果一个人在当前讨论问题的领域有至少三次成功的经验，那他的可信度就更高。第二，如果这个人能围绕自己的观点，阐述其中的逻辑和因果，那就更好了。</p>
<p>根据每个人的观点和可信度加权进行统计，就能得出最优的结果。</p>
<h2 id="总结">总结</h2>
<p>其实读这本书，还有一个印象深刻的收获，就是学会怎样制定自己的原则，关于这个，之后再单独写吧。</p>
<p>这本书的结构极其清晰，其实就是一个填充了丰富内容的大纲，或者说是一个条理的思维导图，以至于它可以作为一本工具书来用，就是我开头说的「真实世界的游戏攻略」，当遇到一件类似的事情，迷茫或不知所措的时候，可以拿出来看一看。</p>
<p>对我——一个死理性派——来说，这本书仿佛就是一件礼物，在我需要的时候被送到了我手里。</p>
]]></content>
    </entry>
</feed>